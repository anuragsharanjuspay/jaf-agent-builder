// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")  // pooled (PgBouncer)
  directUrl = env("DIRECT_URL")    // direct for Prisma CLI/migrations
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  agents    Agent[]
  teams     TeamMember[]
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  members   TeamMember[]
  agents    Agent[]
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      String   @default("member") // owner, admin, member
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
}

model Agent {
  id           String   @id @default(cuid())
  name         String
  description  String?
  model        String
  
  // JAF Core fields
  instructions String   @default("") @db.Text // JAF instructions (can be template)
  modelConfig  Json?    // temperature, maxTokens, etc.
  handoffs     String[] // Other agent names for handoffs
  outputSchema Json?    // Zod schema for structured output
  
  // Memory configuration
  memoryType   String?  @default("in-memory") // 'in-memory', 'redis', 'postgres'
  memoryConfig Json?    // Memory-specific settings
  
  // Guardrails
  inputGuardrails  Json? // Input validation rules
  outputGuardrails Json? // Output validation rules
  
  // Tools and capabilities
  tools        String[] // Array of tool IDs
  capabilities String[]
  
  // Legacy/compatibility fields (will migrate data)
  systemPrompt String   @db.Text
  config       Json?    // Additional configuration
  
  // Metadata
  status       String   @default("draft") // draft, active, archived
  userId       String
  teamId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team         Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  
  knowledgeSources KnowledgeSource[]
  executions       AgentExecution[]
  
  @@index([userId])
  @@index([teamId])
  @@index([status])
}

model Tool {
  id            String   @id @default(cuid())
  name          String   @unique
  displayName   String
  description   String?
  category      String
  
  // JAF Tool Schema
  schema        Json?    // Full JAF tool schema
  parameters    Json     // Zod schema as JSON (for compatibility)
  implementation String?  @db.Text // Custom implementation code
  isBuiltin     Boolean  @default(false)
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([category])
  @@index([isBuiltin])
}

model KnowledgeSource {
  id        String   @id @default(cuid())
  agentId   String
  type      String   // document, url, api
  name      String
  source    String   @db.Text // file path, URL, or API endpoint
  settings  Json?    // Additional settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@index([agentId])
  @@index([type])
}

model AgentExecution {
  id         String   @id @default(cuid())
  agentId    String
  input      String   @db.Text
  output     String?  @db.Text
  traceId    String?
  runId      String?
  durationMs Int?
  status     String   // pending, running, completed, failed
  error      String?  @db.Text
  metadata   Json?
  createdAt  DateTime @default(now())
  completedAt DateTime?
  
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@index([agentId])
  @@index([status])
  @@index([createdAt])
}
